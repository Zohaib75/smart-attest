/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sample access control list.
 */



rule HecCanDoAllUni {
	description: "Hec can do everything with universities"
  	participant: "org.example.mynetwork.Hec"
  	operation: ALL
    resource: "org.example.mynetwork.University"
  	action: ALLOW
}

rule HecSeeOwn {
	description: "Hec can see themselves"
  	participant: "org.example.mynetwork.Hec"
  	operation: READ
    resource: "org.example.mynetwork.Hec"
  	action: ALLOW
}

rule HecCanDepartment {
	description: "Hec can CRUD department"
  	participant: "org.example.mynetwork.Hec"
  	operation: ALL
    resource: "org.example.mynetwork.Department"
  	action: ALLOW
    
}

rule HecCanDepartment2 {
	description: "Hec can CRUD department"
  	participant: "org.example.mynetwork.Hec"
  	operation: ALL
    resource: "org.example.mynetwork.Add_Department"
  	action: ALLOW
    
}


rule HecDegree {
	description: "Hec can read and update degrees"
  	participant: "org.example.mynetwork.Hec"
  	operation: READ,UPDATE
    resource: "org.example.mynetwork.Degree"
  	action: ALLOW
}

rule HecApproval {
	description: "Registrar Approval"
  	participant: "org.example.mynetwork.Hec"
  	operation: CREATE
    resource: "org.example.mynetwork.HecApprove"
    action: ALLOW
}

rule studentCanSeeOwnAssets { 
	  description: "Students can see their own assets"
  	participant(p): "org.example.mynetwork.Student"
  	operation: READ
    resource(r): "org.example.mynetwork.Degree"
    condition: (p.getIdentifier() === r.student.getIdentifier() )
  	action: ALLOW
}

rule studentCanSeeStudent { 
	  description: "Students can see themselves"
  	participant(p): "org.example.mynetwork.Student"
  	operation: READ
    resource(r): "org.example.mynetwork.Student"
    condition: (p.getIdentifier() === r.getIdentifier() )
  	action: ALLOW
}

rule uniCanSeeuni { 
	  description: "Universities can see only their own uni"
  	participant(p): "org.example.mynetwork.University"
  	operation: READ
    resource(r): "org.example.mynetwork.University"
    condition: (p.getIdentifier() === r.getIdentifier() )
  	action: ALLOW
}

rule uniCanSeeStudents { 
	  description: "Universities can see only their own Students"
  	participant(p): "org.example.mynetwork.University"
  	operation: READ
    resource(r): "org.example.mynetwork.Student"
    condition: (p.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}

rule UnisDean { 
	description: "Universities can CRUD only their Dean"
  	participant(p): "org.example.mynetwork.University"
  	operation: ALL
    resource(r): "org.example.mynetwork.Dean"
    condition: (p.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}

rule UnisDean2 { 
	description: "Universities can CRUD only their Dean"
  	participant: "org.example.mynetwork.University"
  	operation: ALL
    resource: "org.example.mynetwork.Add_Dean"
  	action: ALLOW
}


rule UnisIssuer { 
	description: "Universities can CRUD only their Issuer"
  	participant(p): "org.example.mynetwork.University"
  	operation: ALL
    resource(r): "org.example.mynetwork.Issuer"
    condition: (p.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}

rule uniDegree{
  description: "Universities can See their degrees"
  	participant(p): "org.example.mynetwork.University"
  	operation: READ
    resource(r): "org.example.mynetwork.Degree"
    condition: (p.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}

rule UnisIssuer2 { 
	description: "Universities can CRUD only their Issuer"
  	participant: "org.example.mynetwork.University"
  	operation: ALL
    resource: "org.example.mynetwork.Add_Issuer"
   	action: ALLOW
}

rule UnisRegistrar { 
	description: "Universities can CRUD only their Registrar"
  	participant(p): "org.example.mynetwork.University"
  	operation: ALL
    resource(r): "org.example.mynetwork.Registrar"
    condition: (p.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}

rule uniCanSeeDegrees { 
	  description: "Universities can see only Degree issued by their Uni"
  	participant(p): "org.example.mynetwork.University"
  	operation: READ
    resource(r): "org.example.mynetwork.Degree"
    condition: (p.getIdentifier() === r.issuer.university.getIdentifier() )
  	action: ALLOW
}
rule uniCanSeeDepartment { 
	  description: "Universities can see only Department issued by their Uni"
  	participant(p): "org.example.mynetwork.University"
  	operation: READ
    resource(r): "org.example.mynetwork.Department"
    condition: (p.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}


rule DeanCanSee {
	description: "Dean can see themself"
  	participant(p): "org.example.mynetwork.Dean"
  	operation: READ
    resource(r): "org.example.mynetwork.Dean"
    condition: (p.getIdentifier() === r.getIdentifier() )
  	action: ALLOW
}

rule dean2 {
  	description: "Dean can see students of his uni and department"
  	participant(p): "org.example.mynetwork.Dean"
  	operation: READ
    resource(r): "org.example.mynetwork.Student"
    condition: (p.university.getIdentifier() === r.university.getIdentifier() && p.department.getIdentifier() === r.department.getIdentifier() )
  	action: ALLOW
}
rule deanDegree {
	description: "Dean can update own Uni Degree"
  	participant(p): "org.example.mynetwork.Dean"
  	operation: READ,UPDATE
    resource(r): "org.example.mynetwork.Degree"
  	condition: (p.university.getIdentifier() === r.student.university.getIdentifier() && p.department.getIdentifier() === r.student.department.getIdentifier())
  	action: ALLOW
}

rule deanApproval {
	description: "Dean Approval"
  	participant: "org.example.mynetwork.Dean"
  	operation: CREATE
    resource: "org.example.mynetwork.Approve"
    action: ALLOW
}

rule registrarDegree {
	description: "Registrar own Uni Degree"
  	participant(p): "org.example.mynetwork.Registrar"
  	operation: READ,UPDATE
    resource(r): "org.example.mynetwork.Degree"
  	condition: (p.university.getIdentifier() === r.student.university.getIdentifier() )
  	action: ALLOW
}

rule registartApproval {
	description: "Registrar Approval"
  	participant: "org.example.mynetwork.Registrar"
  	operation: CREATE
    resource: "org.example.mynetwork.Approve"
    action: ALLOW
}


rule RegistrarCanSee {
	description: "Registrar can see themself"
  	participant(p): "org.example.mynetwork.Registrar"
  	operation: READ
    resource(r): "org.example.mynetwork.Registrar"
    condition: (p.getIdentifier() === r.getIdentifier() )
  	action: ALLOW
}

rule RegistrarCanAddStudents {
	description: "Only Registrar can CRUD Students of his University"
  	participant(p): "org.example.mynetwork.Registrar"
  	operation: ALL
    resource(r): "org.example.mynetwork.Student"
    condition: (p.university.getIdentifier() === r.university.getIdentifier() )
  	action: ALLOW
}
rule RegistrarCanAddStudents2 {
	  description: "Only Registrar can CRUD Students of his University"
  	participant: "org.example.mynetwork.Registrar"
  	operation: ALL
    resource: "org.example.mynetwork.Add_Student"
    action: ALLOW
}

rule RegistrarCanSeeDepartments{
    
    description: "Registrar can See Departments of his University"
  	participant: "org.example.mynetwork.Registrar"
  	operation: READ
    resource: "org.example.mynetwork.Department"
    action: ALLOW
}
rule IssuercanSee {
	description: "Issuer can see themselves"
  	participant(p): "org.example.mynetwork.Issuer"
  	operation: READ
    resource(r): "org.example.mynetwork.Issuer"
    condition: (p.getIdentifier() === r.getIdentifier() )
  	action: ALLOW
}
rule IssuercanSeeStuds{

  	description: "Issuer can see Students of his Department"
  	participant(p): "org.example.mynetwork.Issuer"
  	operation: READ
    resource(r): "org.example.mynetwork.Student"
    condition: (p.university.getIdentifier() === r.university.getIdentifier() && p.department.getIdentifier() === r.department.getIdentifier())
  	action: ALLOW

}
rule IssuercanIssueDegree {
	description: "Issuer can issue degree"
  	participant(p): "org.example.mynetwork.Issuer"
  	operation: ALL
    resource(r): "org.example.mynetwork.Degree"
    condition: ( p.getIdentifier() === r.issuer.getIdentifier() && p.university.getIdentifier() === r.student.university.getIdentifier() && p.department.getIdentifier() === r.student.department.getIdentifier())
  	action: ALLOW
}

rule IssuercanIssueDegree2 {
	description: "Issuer can issue using transaction Issue Degree "
  	participant(p): "org.example.mynetwork.Issuer"
  	operation: ALL
    resource(r): "org.example.mynetwork.IssueDegree"
    condition: (  p.university.getIdentifier() === r.student.university.getIdentifier() && p.department.getIdentifier() === r.student.department.getIdentifier())
  	action: ALLOW
}




rule SystemACL {
  description:  "System ACL to permit all access"
  participant: "org.hyperledger.composer.system.Participant"
  operation: ALL
  resource: "org.hyperledger.composer.system.**"
  action: ALLOW
}

rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}